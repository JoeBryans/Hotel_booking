// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  password      String?
  phone         String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  bookings      Booking[]
  payments      Payment[]
  hotel         Hotel[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Hotel {
  id       String   @id @default(cuid())
  name     String?
  location String?
  rating   Int?
  userId   String
  city     String
  country  String
  state    String
  image    String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews  Review[]
  rooms    Room[]
  // roomAmenities String[]
}

model Review {
  id          String   @id @default(cuid())
  hotelId     String
  reviewerId  String
  userId      String
  // user        User @relation(fields: [userId], references: [id])
  reviewer    User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  hotel       Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  rating      Int
  comment     String
  reviewed_at DateTime
}

model Room {
  id               String    @id @default(cuid())
  name             String
  price            Int
  room_type        String
  hotelId          String
  hotel            Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  bookings         Booking[]
  available_status Boolean
}

model Booking {
  id           String    @id @default(cuid())
  hotelId      String
  userId       String
  roomId       String
  booking_date DateTime
  check_in     DateTime
  check_out    DateTime
  status       String
  payment      Payment[]
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room         Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Payment {
  id             String   @id @default(cuid())
  bookingId      String
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking        Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount         Int?
  payment_date   DateTime
  payment_status String?
  status         String?
}
